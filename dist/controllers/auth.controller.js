"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.login = exports.register = void 0;
const client_1 = require("@prisma/client");
const bcrypt_1 = __importDefault(require("bcrypt"));
const validators_1 = require("../validators");
const utils_1 = require("../utils");
const prisma = new client_1.PrismaClient();
// Register User
const register = (req, res, next) => __awaiter(void 0, void 0, void 0, function* () {
    const { name, phoneNumber, email, password, countryCode } = req.body;
    const { error } = validators_1.registerSchema.validate(req.body);
    if (error) {
        return res.status(400).json({ message: error.details[0].message });
    }
    // Validate the phone number
    if (!(0, validators_1.isValidPhoneNumber)(phoneNumber, countryCode)) {
        return res.status(400).json({ message: "Invalid phone number" });
    }
    const hashedPassword = bcrypt_1.default.hashSync(password, 10);
    try {
        // todo have an option to generate new contacts for registered users as well if they pass a argument
        const user = yield prisma.user.create({
            data: {
                name,
                phoneNumber,
                email,
                password: hashedPassword,
            },
        });
        // Generate random contacts if autoGeneratedContacts is true
        // if (req.body.autoGeneratedContacts) {
        //       await generateContacts(user.id);
        // }
        const token = (0, utils_1.createToken)(user.id);
        //   For now return token
        res.status(201).json({ token: token });
    }
    catch (error) {
        if (error.code === "P2002") {
            // If phone number already exists
            return res.status(409).json({ message: "Phone number already exists" });
        }
        else {
            // Else pass it to error handling middleware
            next(error);
        }
    }
});
exports.register = register;
// Login User
const login = (req, res, next) => __awaiter(void 0, void 0, void 0, function* () {
    const { phoneNumber, password } = req.body;
    try {
        //   check for user existence
        const user = yield prisma.user.findUnique({
            where: {
                phoneNumber,
            },
        });
        if (!user) {
            return res.status(404).json({ message: "User not found" });
        }
        //   Validate password
        const validPassword = bcrypt_1.default.compareSync(password, user.password);
        if (!validPassword) {
            return res.status(401).json({ message: "Invalid password" });
        }
        //   create token
        const token = (0, utils_1.createToken)(user.id);
        return res.status(200).json({ token });
    }
    catch (error) {
        next(error);
    }
});
exports.login = login;
//# sourceMappingURL=auth.controller.js.map