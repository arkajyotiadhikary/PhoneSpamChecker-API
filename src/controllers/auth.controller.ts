import { Request, Response, NextFunction } from "express";
import { PrismaClient } from "@prisma/client";
import bcrypt from "bcrypt";
import { registerSchema, isValidPhoneNumber, contactSchema } from "../validators";
import { createToken, generateContacts } from "../utils";
const prisma = new PrismaClient();

// Register User
export const register = async (req: Request, res: Response, next: NextFunction) => {
      const { name, phoneNumber, email, password, countryCode } = req.body;
      const { error } = registerSchema.validate(req.body);
      if (error) {
            return res.status(400).json({ message: error.details[0].message });
      }
      // Validate the phone number
      if (!isValidPhoneNumber(phoneNumber, countryCode)) {
            return res.status(400).json({ message: "Invalid phone number" });
      }

      const hashedPassword = bcrypt.hashSync(password, 10);

      try {
            // todo have an option to generate new contacts for registered users as well if they pass a argument
            const user = await prisma.user.create({
                  data: {
                        name,
                        phoneNumber,
                        email,
                        password: hashedPassword,
                  },
            });

            // Generate random contacts if autoGeneratedContacts is true
            if (req.body.autoGeneratedContacts) {
                  await generateContacts(user.id);
            }

            const token = createToken(user.id);
            //   For now return token
            res.status(201).json({ token: token });
      } catch (error: any) {
            if (error.code === "P2002") {
                  // If phone number already exists
                  return res.status(409).json({ message: "Phone number already exists" });
            } else {
                  // Else pass it to error handling middleware
                  next(error);
            }
      }
};

// Login User
export const login = async (req: Request, res: Response, next: NextFunction) => {
      const { phoneNumber, password } = req.body;
      try {
            //   check for user existence
            const user = await prisma.user.findUnique({
                  where: {
                        phoneNumber,
                  },
            });
            if (!user) {
                  return res.status(404).json({ message: "User not found" });
            }
            //   Validate password
            const validPassword = bcrypt.compareSync(password, user.password);
            if (!validPassword) {
                  return res.status(401).json({ message: "Invalid password" });
            }
            //   create token
            const token = createToken(user.id);
            return res.status(200).json({ token });
      } catch (error) {
            next(error);
      }
};
